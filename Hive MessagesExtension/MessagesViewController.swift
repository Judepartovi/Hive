//
//  MessagesViewController.swift
//  Hive MessagesExtension
//
//  Created by Jude Partovi on 6/6/22.
//

import UIKit
import Messages

class MessagesViewController: MSMessagesAppViewController, TimeViewControllerDelegate, InviteViewControllerDelegate {
    
    @IBOutlet var post: UIButton?
    @IBAction func postMessage(sender: UIButton) {
        print("POST CLICKED")
        
        guard let conversation = activeConversation else { fatalError("Expected a conversation") }
        
        let session = conversation.selectedMessage?.session ?? MSSession()
        
        let alternateMessageLayout = MSMessageTemplateLayout()
        alternateMessageLayout.caption = "Caption"
        alternateMessageLayout.imageTitle = "Image Title"
        alternateMessageLayout.imageSubtitle = "Image subtitle"
        alternateMessageLayout.trailingCaption = "Trailing caption"
        alternateMessageLayout.subcaption = "Subcaption"
        alternateMessageLayout.trailingSubcaption = "Trailing subcaption"
        
        let message = MSMessage(session: session)
        let messageLayout = MSMessageLiveLayout(alternateLayout: alternateMessageLayout)
        
        message.layout = alternateMessageLayout
        message.summaryText = "Summary Text"
        
        /*
        let myBaseURL = "url"
        guard var components = URLComponents(string: myBaseURL) else {
            fatalError("Invalid base url")
        }
         
        let size = URLQueryItem(name: "Size", value: "Large")
        let count = URLQueryItem(name: "Topping_Count", value: "2")
        let cheese = URLQueryItem(name: "Topping_0", value: "Cheese")
        let pepperoni = URLQueryItem(name: "Topping_1", value: "Pepperoni")
        components.queryItems = [size, count, cheese, pepperoni]
         
        guard let url = components.url  else {
            fatalError("Invalid URL components.")
        }
         
        message.url = url
        */
        var components = URLComponents()
        components.queryItems = [URLQueryItem(name: "type", value: "time")]
        message.url = components.url!
        
        conversation.insert(message) {error in
            // empty for now
        }
        
    }
    
    override func viewDidLoad() {
        super.viewDidLoad()
        // Do any additional setup after loading the view.
        
    }
    
    // MARK: - Conversation Handling
    
    override func willBecomeActive(with conversation: MSConversation) {
        // Called when the extension is about to move from the inactive to active state.
        // This will happen when the extension is about to present UI.
        
        print("Will become active")
        
        presentViewController(for: conversation, with: presentationStyle)
        
        /*
        if activeConversation?.selectedMessage != nil {
        
            guard let components = NSURLComponents(url: (activeConversation?.selectedMessage!.url)!, resolvingAgainstBaseURL: false) else {
                    fatalError("The message contains an invalid URL")
            }
         
            if let queryItems = components.queryItems {
            // process the query items here...
                print("HEEEEERREEEEE")
            }
            
        }
        */
        // Use this method to configure the extension and restore previously stored state.
    }
    
    override func didResignActive(with conversation: MSConversation) {
        // Called when the extension is about to move from the active to inactive state.
        // This will happen when the user dismisses the extension, changes to a different
        // conversation or quits Messages.
        
        // Use this method to release shared resources, save user data, invalidate timers,
        // and store enough state information to restore your extension to its current state
        // in case it is terminated later.
    }
   
    override func didReceive(_ message: MSMessage, conversation: MSConversation) {
        // Called when a message arrives that was generated by another instance of this
        // extension on a remote device.
        
        print("Did receive")
        
        // Use this method to trigger UI updates in response to the message.
    }
    
    override func didStartSending(_ message: MSMessage, conversation: MSConversation) {
        // Called when the user taps the send button.
    }
    
    override func didCancelSending(_ message: MSMessage, conversation: MSConversation) {
        // Called when the user deletes the message without sending it.
    
        // Use this to clean up state related to the deleted message.
    }
    
    override func willTransition(to presentationStyle: MSMessagesAppPresentationStyle) {
        // Called before the extension transitions to a new presentation style.
    
        // Use this method to prepare for the change in presentation style.
    }
    
    override func didTransition(to presentationStyle: MSMessagesAppPresentationStyle) {
        // Called after the extension transitions to a new presentation style.
    
        // Use this method to finalize any behaviors associated with the change in presentation style.
    }
    
    private func presentViewController(for conversation: MSConversation, with presentationStyle: MSMessagesAppPresentationStyle) {
        
        // Instantiate a `IceCreamsViewController` and present it.
        let controller: UIViewController
        
        
        guard let messageURL = conversation.selectedMessage?.url else {return}
        guard let urlComponents = NSURLComponents(url: messageURL, resolvingAgainstBaseURL: false), let queryItems = urlComponents.queryItems else {return}
        /*
        for queryItem in queryItems {
            guard let value = queryItem.value else { continue }
                    
            print(value)
        }
         */
        let value = queryItems[0].value!
        print("Value: " + value)
        
        if value == "time" {
            controller = instantiateTimeViewController()
        } else if value == "invite" {
            controller = instantiateInviteViewController()
        } else {
            controller = instantiateTimeViewController()
            print("FAAAAAIIIIIILLLLLL")
        }
      
        
        // Remove any existing child controllers.
        for child in children {
            child.willMove(toParent: nil)
            child.view.removeFromSuperview()
            child.removeFromParent()
        }

        // Embed the new controller.
        addChild(controller)
                
        controller.view.frame = view.bounds
        controller.view.translatesAutoresizingMaskIntoConstraints = false
        view.addSubview(controller.view)
                
        controller.view.leftAnchor.constraint(equalTo: view.leftAnchor).isActive = true
        controller.view.rightAnchor.constraint(equalTo: view.rightAnchor).isActive = true
        controller.view.topAnchor.constraint(equalTo: view.topAnchor).isActive = true
        controller.view.bottomAnchor.constraint(equalTo: view.bottomAnchor).isActive = true
                
        controller.didMove(toParent: self)
    }
    
    func instantiateTimeViewController() -> UIViewController {
        guard let controller = storyboard?.instantiateViewController(withIdentifier: TimeViewController.storyboardID) as? TimeViewController else { fatalError("Unable to instantiate an TimeViewController from the storyboard") }
            
        controller.delegate = self
        
        return controller
    }
    
    func didFinishTask(sender: TimeViewController) {
        
    }
    
    func instantiateInviteViewController() -> UIViewController {
        guard let controller = storyboard?.instantiateViewController(withIdentifier: InviteViewController.storyboardID) as? InviteViewController else { fatalError("Unable to instantiate an InviteViewController from the storyboard") }
            
        controller.delegate = self
        
        return controller
    }
    
    func didFinishTask(sender: InviteViewController) {
    
    }
}
